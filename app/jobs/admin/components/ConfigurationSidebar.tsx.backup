'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { X, Plus } from 'lucide-react';
import { ClientConfiguration } from '../../types/admin';
import { JobSourceFetchSetting } from '../../types/fetchSources';
import { getClientConfiguration, updateClientConfiguration, createClientConfiguration, getAdminClientCards, deleteFetchSourceSetting } from '../../actions/jobsActions';
import { toast } from 'sonner';
import { FetchSourceCard } from './FetchSourceCard';
import { SourceConfigModal } from './SourceConfigModal';

interface ConfigurationSidebarProps {
  isOpen: boolean;
  onClose: () => void;
  clientID: number | null;
  onSave: (config: ClientConfiguration) => void;
}

export function ConfigurationSidebar({
  isOpen,
  onClose,
  clientID,
  onSave,
}: ConfigurationSidebarProps) {
  const [config, setConfig] = useState<ClientConfiguration | null>(null);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [sourceModalOpen, setSourceModalOpen] = useState(false);
  const [editingSource, setEditingSource] = useState<JobSourceFetchSetting | undefined>(undefined);

  useEffect(() => {
    const loadConfiguration = async () => {
      if (clientID && isOpen) {
        try {
          setLoading(true);
          const data = await getClientConfiguration(clientID);

          // Map backend response to frontend type
          setConfig({
            configID: data.configurationID,
            clientID: data.clientID,
            clientName: data.clientName || '',
            clientRole: 'Job Seeker',
            keywords: data.keywords ? data.keywords.split(',').map((k: string) => k.trim()) : [],
            locations: data.preferredLocations ? data.preferredLocations.split(',').map((l: string) => l.trim()) : [],
            salaryMin: data.salaryMin || 0,
            salaryMax: data.salaryMax || 0,
            jobTypes: ['Full-time'], // TODO: Add to backend model
            experienceLevel: data.jobLevelPreference || 'Mid',
            remotePreference: data.remotePreference ? 'Remote' : 'Any',
            enabledSources: ['Apify'], // DEPRECATED - kept for backward compatibility
            fetchSources: data.fetchSources || [], // NEW: Array of fetch source settings
            fetchFrequency: 'Daily',
            jobsPerFetch: 200,
            autoCreateBatches: true,
            batchSize: 50,
            assignedRecruiterID: undefined,
            assignedRecruiterName: undefined,
            matchScoreThreshold: Math.floor(data.minMatchScore || 50),
            batchExpiryHours: 72,
            isConfigured: true,
            lastFetchTime: data.updatedTS,
            createdTS: data.createdTS,
            updatedTS: data.updatedTS,
          });
        } catch (error: any) {
          console.error('Error loading configuration:', error);
          // If no config found, fetch client name and create a new config
          if (error.message.includes('No configuration found')) {
            // Fetch client cards to get the client name
            const clients = await getAdminClientCards();
            const client = clients.find((c) => c.clientID === clientID);

            // Initialize with defaults
            setConfig({
              configID: 0,
              clientID: clientID,
              clientName: client?.clientName || '',
              clientRole: 'Job Seeker',
              keywords: [],
              locations: [],
              salaryMin: 0,
              salaryMax: 0,
              jobTypes: ['Full-time'],
              experienceLevel: 'Mid',
              remotePreference: 'Any',
              enabledSources: ['Apify'], // DEPRECATED
              fetchSources: [], // NEW: Empty array for new configs
              fetchFrequency: 'Daily',
              jobsPerFetch: 200,
              autoCreateBatches: true,
              batchSize: 50,
              assignedRecruiterID: undefined,
              assignedRecruiterName: undefined,
              matchScoreThreshold: 50,
              batchExpiryHours: 72,
              isConfigured: false,
              lastFetchTime: undefined,
              createdTS: new Date().toISOString(),
              updatedTS: new Date().toISOString(),
            });
          } else {
            toast.error('Failed to load configuration');
          }
        } finally {
          setLoading(false);
        }
      }
    };

    loadConfiguration();
  }, [clientID, isOpen]);

  const reloadConfiguration = async () => {
    if (!clientID) return;
    try {
      const data = await getClientConfiguration(clientID);
      setConfig((prev) => ({
        ...prev!,
        fetchSources: data.fetchSources || [],
      }));
    } catch (error) {
      console.error('Error reloading configuration:', error);
    }
  };

  const handleAddFetchSource = () => {
    setEditingSource(undefined);
    setSourceModalOpen(true);
  };

  const handleEditFetchSource = (source: JobSourceFetchSetting) => {
    setEditingSource(source);
    setSourceModalOpen(true);
  };

  const handleDeleteFetchSource = async (fetchSettingID: number) => {
    try {
      await deleteFetchSourceSetting(fetchSettingID);
      toast.success('Fetch source deleted successfully');
      await reloadConfiguration();
    } catch (error: any) {
      toast.error(error.message || 'Failed to delete fetch source');
    }
  };

  const handleFetchSourceSaved = async () => {
    await reloadConfiguration();
  };

  const handleSave = async () => {
    if (!config) return;

    try {
      setSaving(true);

      // Map frontend type to backend request
      const requestData = {
        clientID: config.clientID,
        configurationName: `${config.clientName} Config`,
        jobTitles: null,
        preferredLocations: config.locations.join(', '),
        keywords: config.keywords.join(', '),
        excludeKeywords: null,
        salaryMin: config.salaryMin,
        salaryMax: config.salaryMax,
        remotePreference: config.remotePreference === 'Remote',
        jobLevelPreference: config.experienceLevel,
        excludedCompanies: null,
        preferredCompanies: null,
        minMatchScore: config.matchScoreThreshold,
        exclusionRules: null,
        autoApplyEnabled: false,
        industryPreferences: null,
        enableLinkedInSource: false,
        jobSourceQueryTemplate: null,
        primaryJobSourceID: 1, // Apify
        isActive: true,
        isPrimary: true,
      };

      let savedConfig;
      if (config.configID && config.configID > 0) {
        // Update existing
        savedConfig = await updateClientConfiguration(config.configID, requestData);
        toast.success('Configuration updated successfully');
      } else {
        // Create new
        savedConfig = await createClientConfiguration(requestData);
        toast.success('Configuration created successfully');
      }

      onSave(config);
      onClose();
    } catch (error: any) {
      console.error('Error saving configuration:', error);
      toast.error(`Failed to save configuration: ${error.message}`);
    } finally {
      setSaving(false);
    }
  };

  if (!isOpen) return null;

  if (loading) {
    return (
      <>
        <div
          className="fixed inset-0 bg-black/20 z-40 transition-opacity"
          onClick={onClose}
        />
        <div className="fixed right-0 top-0 h-full w-[420px] bg-white shadow-2xl z-50 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#682A53] mx-auto mb-2"></div>
            <p className="text-xs text-gray-600">Loading configuration...</p>
          </div>
        </div>
      </>
    );
  }

  if (!config) return null;

  return (
    <>
      {/* Overlay */}
      <div
        className="fixed inset-0 bg-black/20 z-40 transition-opacity"
        onClick={onClose}
      />

      {/* Sidebar */}
      <div className="fixed right-0 top-0 h-full w-[420px] bg-white shadow-2xl z-50 overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between">
          <h2 className="text-sm font-bold text-[#682A53]">Client Configuration</h2>
          <button
            onClick={onClose}
            className="p-1 hover:bg-gray-100 rounded transition-colors"
          >
            <X className="h-4 w-4 text-gray-600" />
          </button>
        </div>

        {/* Content */}
        <div className="p-4 space-y-4">
          {/* Client Info */}
          <div className="bg-purple-50 border border-purple-200 rounded-lg p-3">
            <div className="text-xs font-bold text-gray-900">{config.clientName}</div>
            <div className="text-[10px] text-gray-600">{config.clientRole}</div>
          </div>

          {/* Job Search Criteria */}
          <div className="space-y-3">
            <h3 className="text-xs font-bold text-gray-900 border-b border-gray-200 pb-1">
              Job Search Criteria
            </h3>

            {/* Keywords */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700">Keywords</Label>
              <Textarea
                value={config.keywords.join(', ')}
                onChange={(e) =>
                  setConfig({
                    ...config,
                    keywords: e.target.value.split(',').map((k) => k.trim()),
                  })
                }
                placeholder="React, Node.js, TypeScript"
                rows={2}
                className="text-xs mt-1"
              />
            </div>

            {/* Locations */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700">Locations</Label>
              <Textarea
                value={config.locations.join(', ')}
                onChange={(e) =>
                  setConfig({
                    ...config,
                    locations: e.target.value.split(',').map((l) => l.trim()),
                  })
                }
                placeholder="San Francisco, Remote, New York"
                rows={2}
                className="text-xs mt-1"
              />
            </div>

            {/* Salary Range */}
            <div className="grid grid-cols-2 gap-2">
              <div>
                <Label className="text-[10px] font-semibold text-gray-700">Salary Min ($)</Label>
                <Input
                  type="number"
                  value={config.salaryMin}
                  onChange={(e) =>
                    setConfig({ ...config, salaryMin: parseInt(e.target.value) })
                  }
                  className="text-xs h-7 mt-1"
                />
              </div>
              <div>
                <Label className="text-[10px] font-semibold text-gray-700">Salary Max ($)</Label>
                <Input
                  type="number"
                  value={config.salaryMax}
                  onChange={(e) =>
                    setConfig({ ...config, salaryMax: parseInt(e.target.value) })
                  }
                  className="text-xs h-7 mt-1"
                />
              </div>
            </div>

            {/* Job Types */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700 mb-1 block">
                Job Types
              </Label>
              <div className="space-y-1">
                {['Full-time', 'Contract', 'Part-time'].map((type) => (
                  <label key={type} className="flex items-center gap-2 text-xs">
                    <input
                      type="checkbox"
                      checked={config.jobTypes.includes(type)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setConfig({ ...config, jobTypes: [...config.jobTypes, type] });
                        } else {
                          setConfig({
                            ...config,
                            jobTypes: config.jobTypes.filter((t) => t !== type),
                          });
                        }
                      }}
                      className="rounded border-gray-300"
                    />
                    {type}
                  </label>
                ))}
              </div>
            </div>

            {/* Experience Level */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700">Experience Level</Label>
              <Select
                value={config.experienceLevel}
                onValueChange={(value) => setConfig({ ...config, experienceLevel: value })}
              >
                <SelectTrigger className="h-7 text-xs mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Entry" className="text-xs">Entry</SelectItem>
                  <SelectItem value="Mid" className="text-xs">Mid</SelectItem>
                  <SelectItem value="Senior" className="text-xs">Senior</SelectItem>
                  <SelectItem value="Mid-Senior" className="text-xs">Mid-Senior</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Remote Preference */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700">Remote Preference</Label>
              <Select
                value={config.remotePreference}
                onValueChange={(value) => setConfig({ ...config, remotePreference: value })}
              >
                <SelectTrigger className="h-7 text-xs mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Remote" className="text-xs">Remote Only</SelectItem>
                  <SelectItem value="Hybrid" className="text-xs">Hybrid</SelectItem>
                  <SelectItem value="On-site" className="text-xs">On-site</SelectItem>
                  <SelectItem value="Any" className="text-xs">Any</SelectItem>
                  <SelectItem value="Remote or Hybrid" className="text-xs">Remote or Hybrid</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Job Sources - NEW */}
          <div className="space-y-3">
            <div className="flex items-center justify-between border-b border-gray-200 pb-1">
              <h3 className="text-xs font-bold text-gray-900">Job Sources</h3>
              <Button
                onClick={handleAddFetchSource}
                disabled={!config.configID}
                size="sm"
                variant="outline"
                className="h-6 px-2 text-[10px]"
              >
                <Plus className="h-3 w-3 mr-1" />
                Add Source
              </Button>
            </div>

            {config.configID === 0 && (
              <div className="bg-amber-50 border border-amber-200 rounded-lg p-2">
                <p className="text-xs text-amber-800">
                  Save the configuration first before adding job sources.
                </p>
              </div>
            )}

            {config.fetchSources && config.fetchSources.length > 0 ? (
              <div className="space-y-2">
                {config.fetchSources.map((source) => (
                  <FetchSourceCard
                    key={source.fetchSettingID}
                    fetchSource={source}
                    onEdit={handleEditFetchSource}
                    onDelete={handleDeleteFetchSource}
                  />
                ))}
              </div>
            ) : config.configID > 0 ? (
              <div className="bg-gray-50 border border-gray-200 rounded-lg p-3 text-center">
                <p className="text-xs text-gray-600 mb-2">No job sources configured</p>
                <Button
                  onClick={handleAddFetchSource}
                  size="sm"
                  variant="outline"
                  className="h-7 text-xs"
                >
                  <Plus className="h-3 w-3 mr-1" />
                  Add Your First Source
                </Button>
              </div>
            ) : null}
          </div>

          {/* Fetching Settings */}
          <div className="space-y-3">
            <h3 className="text-xs font-bold text-gray-900 border-b border-gray-200 pb-1">
              Fetching Settings
            </h3>

            {/* Frequency */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700">Frequency</Label>
              <Select
                value={config.fetchFrequency}
                onValueChange={(value) => setConfig({ ...config, fetchFrequency: value })}
              >
                <SelectTrigger className="h-7 text-xs mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Daily" className="text-xs">Daily</SelectItem>
                  <SelectItem value="Twice Daily" className="text-xs">Twice Daily</SelectItem>
                  <SelectItem value="Weekly" className="text-xs">Weekly</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Jobs per fetch */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700">Jobs per fetch</Label>
              <Input
                type="number"
                value={config.jobsPerFetch}
                onChange={(e) =>
                  setConfig({ ...config, jobsPerFetch: parseInt(e.target.value) })
                }
                className="text-xs h-7 mt-1"
              />
            </div>

            {/* Auto-create batches */}
            <div>
              <label className="flex items-center gap-2 text-xs">
                <input
                  type="checkbox"
                  checked={config.autoCreateBatches}
                  onChange={(e) =>
                    setConfig({ ...config, autoCreateBatches: e.target.checked })
                  }
                  className="rounded border-gray-300"
                />
                Auto-create batches
              </label>
            </div>
          </div>

          {/* Batch Settings */}
          <div className="space-y-3">
            <h3 className="text-xs font-bold text-gray-900 border-b border-gray-200 pb-1">
              Batch Settings
            </h3>

            {/* Batch size */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700">Batch size (jobs)</Label>
              <Input
                type="number"
                value={config.batchSize}
                onChange={(e) => setConfig({ ...config, batchSize: parseInt(e.target.value) })}
                className="text-xs h-7 mt-1"
              />
            </div>

            {/* Match score threshold */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700">
                Match score threshold (0-100)
              </Label>
              <Input
                type="number"
                value={config.matchScoreThreshold}
                onChange={(e) =>
                  setConfig({ ...config, matchScoreThreshold: parseInt(e.target.value) })
                }
                className="text-xs h-7 mt-1"
              />
            </div>

            {/* Batch expiry */}
            <div>
              <Label className="text-[10px] font-semibold text-gray-700">
                Batch expires in (hours)
              </Label>
              <Input
                type="number"
                value={config.batchExpiryHours}
                onChange={(e) =>
                  setConfig({ ...config, batchExpiryHours: parseInt(e.target.value) })
                }
                className="text-xs h-7 mt-1"
              />
            </div>
          </div>

          {/* Actions */}
          <div className="sticky bottom-0 bg-white pt-4 pb-2 space-y-2 border-t border-gray-200">
            <Button
              onClick={handleSave}
              disabled={saving}
              className="w-full h-8 text-xs bg-gradient-to-r from-[#682A53] to-[#7d3463] hover:from-[#7d3463] hover:to-[#682A53] text-white disabled:opacity-50"
            >
              {saving ? 'Saving...' : 'Save Configuration'}
            </Button>
            <Button
              onClick={onClose}
              variant="outline"
              disabled={saving}
              className="w-full h-8 text-xs border-gray-300 disabled:opacity-50"
            >
              Cancel
            </Button>
          </div>
        </div>
      </div>

      {/* Fetch Source Modal */}
      {config && config.configID && (
        <SourceConfigModal
          isOpen={sourceModalOpen}
          onClose={() => {
            setSourceModalOpen(false);
            setEditingSource(undefined);
          }}
          configurationID={config.configID}
          fetchSource={editingSource}
          onSave={handleFetchSourceSaved}
        />
      )}
    </>
  );
}
